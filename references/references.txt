In Perl, we use variables to access data stored in a memory location(all data and functions are stored in memory).
 Variables are assigned with data values which are used in various operations.

 Perl Reference is a way to access the same data but with a different variable.

 A reference in Perl is a scalar data type which holds the location of another variable
Another variable can be scalar, hashes, arrays, function name etc.
 Nested data structure can be created easily as a user can create a list which contains the references to another list that
 can further contain the references to arrays, scalar or hashes etc.

Reference Creation
You can create references for scalar value, hash, array, function etc.
 In order to create a reference, define a new scalar variable and assign it the name of
  the variable(whose reference you want to create) by prefixing it with a backslash.

# Array Reference

# defining array
@array = ('1', '2', '3');

# making reference of array variable
$reference_array = \@array;


# Hash Reference

# defining hash
%hash = ('1'=>'a', '2'=>'b', '3'=>'c');

# make reference of the hash variable
$reference_hash = \%hash;


# Scalar Value Reference

# defining scalar
$scalar_val = 1234;

# making reference of scalar variable
$reference_scalar = \$scalar_val;


Note:

A reference to an anonymous hash can be created using the curly brackets {} around the key and value pairs.
Example:
# creating reference to anonymous hash
$ref_to_anonymous_hash = {'GFG' => '1', 'Geeks' => '2'};

A reference to an anonymous array can be created using the square brackets [].
Example:
# creating reference to an anonymous array
$ref_to_anonymous_array = [20, 30, ['G', 'F', 'G']];

A reference to an anonymous subroutine can also be created with the help of sub. Here there will be no name for the sub.
Example:
# creating reference to an anonymous subroutine
$ref_to_anonymous_subroutine = sub { print "GeeksforGeeks\n"};

A reference to an Input/output handle i.e. dirhandle and filehandle cannot be created.


Now, after we have made the reference, we need to use it to access the value.
 Dereferencing is the way of accessing the value in the memory pointed by the reference.
 In order to dereference, we use the prefix $, @, % or &
  depending on the type of the variable
  (a reference can point to a array, scalar, or hash etc).